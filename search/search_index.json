{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 The Epirus platform and explorer provide all the tools necessary to quickly and efficiently start developing blockchain applications. The Epirus platform includes several command-line tools, as well as an online dashboard and various web services which allow developers to quickly get up and running with blockchain applications, and which accelerate the blockchain development experience by abstracting away and simplifying many of the complex processes associated with writing blockchain software. The Epirus explorer allows you to visualize your blockchain, be it public or private, and displays extensive information about contracts, tokens, transactions and blocks.","title":"Overview"},{"location":"#overview","text":"The Epirus platform and explorer provide all the tools necessary to quickly and efficiently start developing blockchain applications. The Epirus platform includes several command-line tools, as well as an online dashboard and various web services which allow developers to quickly get up and running with blockchain applications, and which accelerate the blockchain development experience by abstracting away and simplifying many of the complex processes associated with writing blockchain software. The Epirus explorer allows you to visualize your blockchain, be it public or private, and displays extensive information about contracts, tokens, transactions and blocks.","title":"Overview"},{"location":"explorer/","text":"Overview \u00b6 The Epirus blockchain explorer and smart contract registry is the go-to platform for both business and technical users for working with blockchain networks. It provides a rich interface for interpreting data on your ledger, with detailed views of: Smart contracts Tokens Transactions Blocks The flexible user experience provides search, filtering and sorting capabilities, allowing users to easily find the data they require. This is coupled with its integrated smart contract registry which provides unrivalled insights into the behaviour of your blockchain applications, and a RESTful API to facilitate ad-hoc reporting of your data. It additionally supports both public and private permissioned blockchains such as the Ethereum networks, Hyperledger Besu and Quorum by J.P. Morgan. The Features section provides a more in-depth overview of Epirus.","title":"Overview"},{"location":"explorer/#overview","text":"The Epirus blockchain explorer and smart contract registry is the go-to platform for both business and technical users for working with blockchain networks. It provides a rich interface for interpreting data on your ledger, with detailed views of: Smart contracts Tokens Transactions Blocks The flexible user experience provides search, filtering and sorting capabilities, allowing users to easily find the data they require. This is coupled with its integrated smart contract registry which provides unrivalled insights into the behaviour of your blockchain applications, and a RESTful API to facilitate ad-hoc reporting of your data. It additionally supports both public and private permissioned blockchains such as the Ethereum networks, Hyperledger Besu and Quorum by J.P. Morgan. The Features section provides a more in-depth overview of Epirus.","title":"Overview"},{"location":"explorer/faqs/","text":"Frequently Asked Questions \u00b6 Where can I get support? Please email us with your query and a member of our team will come back to you promptly. Is it possible to customise Epirus? Yes, its possible to customise numerous parts of Epirus, including the logos, colors and currency that users see. Please email us for more information. Where can I find the Epirus URL on Azure? Please head to the Getting Started section for instructions. Are you hiring? Please head to our jobs portal for current listings. How can I manage users credentials in Epirus on AWS? On the host, you can use the passwd command to add or update user credentials. Unable to create instance on Azure - your deployment failed Due to a timeout issue, provisioning of Epirus has failed on Azure on some occasions. If you hit this issue, you will see the following error: The specific message is: epirus.service failed because the control process exited with error code. To resolve the error, you will need to logon to the host that was created. To do this, click on the virtual machine name: Then copy the DNS name of the host: Logon to the host by running: ssh -i ~/.ssh/<private-key> epirus@<hostname>.<region>.cloudapp.azure.com Then run the following to start Epirus manually: sudo systemctl start epirus.service Epirus should start, and if you head to the hostname in your browser, you should see the Epirus loading screen: After a few minutes you should see Epirus has started successfully: Unable to create instance on Azure - the template deployment is not valid The template deployment 'blk-technologies.azure-blockchain-explorer-templa-20190701100047' is not valid according to the validation procedure. The tracking id is '494a6331-33c6-4c13-8871-359117dfa70b'. See inner errors for details. Please see https://aka.ms/arm-deploy for usage details. Check that the instance name that you have used is globally unique. Using a common name such as test in the below example will fail: If this does not resolve your issue, please email us with details of the parameters you're trying to use. Epirus is stuck on the loading page Please ensure that you are using the correct node endpoint. To verify it, you can run the following command: curl -X POST --header \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":1}' https://<node-url> If you get a response like the following then you have configured the correct endpoint. {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"Geth/v1.8.12-stable/linux-amd64/go1.10.8\"} I'm trying to upload a contract metadata file but it's failing Please refer to the Contract Registry documentation.","title":"Frequently Asked Questions"},{"location":"explorer/faqs/#frequently-asked-questions","text":"Where can I get support? Please email us with your query and a member of our team will come back to you promptly. Is it possible to customise Epirus? Yes, its possible to customise numerous parts of Epirus, including the logos, colors and currency that users see. Please email us for more information. Where can I find the Epirus URL on Azure? Please head to the Getting Started section for instructions. Are you hiring? Please head to our jobs portal for current listings. How can I manage users credentials in Epirus on AWS? On the host, you can use the passwd command to add or update user credentials. Unable to create instance on Azure - your deployment failed Due to a timeout issue, provisioning of Epirus has failed on Azure on some occasions. If you hit this issue, you will see the following error: The specific message is: epirus.service failed because the control process exited with error code. To resolve the error, you will need to logon to the host that was created. To do this, click on the virtual machine name: Then copy the DNS name of the host: Logon to the host by running: ssh -i ~/.ssh/<private-key> epirus@<hostname>.<region>.cloudapp.azure.com Then run the following to start Epirus manually: sudo systemctl start epirus.service Epirus should start, and if you head to the hostname in your browser, you should see the Epirus loading screen: After a few minutes you should see Epirus has started successfully: Unable to create instance on Azure - the template deployment is not valid The template deployment 'blk-technologies.azure-blockchain-explorer-templa-20190701100047' is not valid according to the validation procedure. The tracking id is '494a6331-33c6-4c13-8871-359117dfa70b'. See inner errors for details. Please see https://aka.ms/arm-deploy for usage details. Check that the instance name that you have used is globally unique. Using a common name such as test in the below example will fail: If this does not resolve your issue, please email us with details of the parameters you're trying to use. Epirus is stuck on the loading page Please ensure that you are using the correct node endpoint. To verify it, you can run the following command: curl -X POST --header \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"web3_clientVersion\",\"params\":[],\"id\":1}' https://<node-url> If you get a response like the following then you have configured the correct endpoint. {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"Geth/v1.8.12-stable/linux-amd64/go1.10.8\"} I'm trying to upload a contract metadata file but it's failing Please refer to the Contract Registry documentation.","title":"Frequently Asked Questions"},{"location":"explorer/features/","text":"Features \u00b6 Epirus provides an intuitivie user experieince, driven by the menu on the left-hand side of the screen. Clicking on the relevent menu item will take you to the associated page. Dashboard \u00b6 The Epirus dashboard provides a summary of key metrics of the blockchain contracts, including: Total transctions, token contracts and peers Graphical transaction count broken down by transaction type (contract creation, contract transaction, currency transfer) Most active contracts Fungible (ERC20) versus non-fungible token contracts (ERC721) Tokens \u00b6 The tokens view provides a view of all tokens deployed in the network, with separate labels for fungible or non-fungible tokens following the ERC20 and ERC721 Ethereum standards respectively. If we click on one of our tokens, we get more information about it (as in the Contracts view). Here you can see the attributes of the token. You can also see details of the transfer events that have taken place for that token. Contracts \u00b6 The contracts view displays all contracts that have been deployed to your network. Here you can see details of all contracts deployed to the network. Those contracts that comply with well defined interfaces are automatically tagged with a type in the Label column to reflect this. For example, ERC20 for fungible token contracts, ERC721 for non-fungible token contracts, and Custom for those that have not been registered in the contract registry. The Name column provides the contract name if the contract is registered in the Epirus contract registry. To learn more about the contract registry, head here . When you click on a contract, you are taken into the contract details page which has various information about the contract. Here you can see details of all transactions associated with the contract and events emmitted by these transactions. If the contract is registered in the registry, events and their parameter names and values will be decoded. Private transactions are labelled with a Private label. They will only be decipherable if the node that the Epirus instance is connected to is privy to the transaction. Transactions \u00b6 The Transactions view provides the details of individual transactions, including private transactions when supported by your blockchain. When you vieiw a transaction details you will be able to view lower-level details, such as the input byte code, which is available under the Additional Details menu. Blocks \u00b6 The blocks view provides details of all blocks being generated on the network. As with the transactions view, technical details are available here too under the Additional Details menu. Here you can see detailsi such as the block difficulty and gas consumed. Accounts \u00b6 Clicking on an address that is not associated with a smart contract, i.e. it holds Ether, will bring up the account view, which displays the current balance and transactions associated with the account. Search \u00b6 The search box in the top-right corner of the screen allows you to search by various criteria, including: Contract address Account address Transaction hash Block hash If a match is found the associated contract, account, transaction or block details will be displayed. Advanced sorting and filters \u00b6 Another key feature is the addition of sorting and filters in Epirus. This enables our users to find very active contracts by sorting their various views by key attributes. Contracts can be sorted by transaction date, transaction count or event contracts by transaction count. The filters provided also allow you to view subsets of the available data, such as only displaying contract creation transactions or fungible tokens in the Tokens view. Peers \u00b6 The peers view provides insights into the peers that your node is connected to. This is usefull if you want to check that you are successfully to a wider network.","title":"Features"},{"location":"explorer/features/#features","text":"Epirus provides an intuitivie user experieince, driven by the menu on the left-hand side of the screen. Clicking on the relevent menu item will take you to the associated page.","title":"Features"},{"location":"explorer/features/#dashboard","text":"The Epirus dashboard provides a summary of key metrics of the blockchain contracts, including: Total transctions, token contracts and peers Graphical transaction count broken down by transaction type (contract creation, contract transaction, currency transfer) Most active contracts Fungible (ERC20) versus non-fungible token contracts (ERC721)","title":"Dashboard"},{"location":"explorer/features/#tokens","text":"The tokens view provides a view of all tokens deployed in the network, with separate labels for fungible or non-fungible tokens following the ERC20 and ERC721 Ethereum standards respectively. If we click on one of our tokens, we get more information about it (as in the Contracts view). Here you can see the attributes of the token. You can also see details of the transfer events that have taken place for that token.","title":"Tokens"},{"location":"explorer/features/#contracts","text":"The contracts view displays all contracts that have been deployed to your network. Here you can see details of all contracts deployed to the network. Those contracts that comply with well defined interfaces are automatically tagged with a type in the Label column to reflect this. For example, ERC20 for fungible token contracts, ERC721 for non-fungible token contracts, and Custom for those that have not been registered in the contract registry. The Name column provides the contract name if the contract is registered in the Epirus contract registry. To learn more about the contract registry, head here . When you click on a contract, you are taken into the contract details page which has various information about the contract. Here you can see details of all transactions associated with the contract and events emmitted by these transactions. If the contract is registered in the registry, events and their parameter names and values will be decoded. Private transactions are labelled with a Private label. They will only be decipherable if the node that the Epirus instance is connected to is privy to the transaction.","title":"Contracts"},{"location":"explorer/features/#transactions","text":"The Transactions view provides the details of individual transactions, including private transactions when supported by your blockchain. When you vieiw a transaction details you will be able to view lower-level details, such as the input byte code, which is available under the Additional Details menu.","title":"Transactions"},{"location":"explorer/features/#blocks","text":"The blocks view provides details of all blocks being generated on the network. As with the transactions view, technical details are available here too under the Additional Details menu. Here you can see detailsi such as the block difficulty and gas consumed.","title":"Blocks"},{"location":"explorer/features/#accounts","text":"Clicking on an address that is not associated with a smart contract, i.e. it holds Ether, will bring up the account view, which displays the current balance and transactions associated with the account.","title":"Accounts"},{"location":"explorer/features/#search","text":"The search box in the top-right corner of the screen allows you to search by various criteria, including: Contract address Account address Transaction hash Block hash If a match is found the associated contract, account, transaction or block details will be displayed.","title":"Search"},{"location":"explorer/features/#advanced-sorting-and-filters","text":"Another key feature is the addition of sorting and filters in Epirus. This enables our users to find very active contracts by sorting their various views by key attributes. Contracts can be sorted by transaction date, transaction count or event contracts by transaction count. The filters provided also allow you to view subsets of the available data, such as only displaying contract creation transactions or fungible tokens in the Tokens view.","title":"Advanced sorting and filters"},{"location":"explorer/features/#peers","text":"The peers view provides insights into the peers that your node is connected to. This is usefull if you want to check that you are successfully to a wider network.","title":"Peers"},{"location":"explorer/getting_started/","text":"Getting Started \u00b6 Epirus supports a number of different hosting options which all come with support from the Web3 Labs team: Cloud - you can find it in the AWS and Azure marketplaces SaaS - we also provide a hosted or on-premise Enterprise version There is also a basic Free version. This documentation reflects the features of our AWS, Azure and Enterprise versions. Azure \u00b6 The Azure Marketplace offer is the simplest full version of Epirus to get up and running with. It requires an active Azure cloud subscription You will need to provide details of your managed ledger (or Ethereum/Quorum/Hyperledger Besu) node. In your Azure portal, navigate to the Azure Blockchain Service instance you wish to use. From here click Transaction nodes -> <your-transaction-node> -> Connection strings Then copy the HTTPS access keys with node URL, such as https://<your-service>.blockchain.azure.com:3200/<acess-key> You will be able to access the Explorer UI via http://<instance-name>-<uuid>.<region>.cloudapp.azure.com To view the actual URL, navigate to the Overview page for the resource group you used for Epirus, then head to Deployments -> blk-technologies.... -> Outputs -> epirusUrl . Please allow a few minutes for the service to fully initialise and display data when initially run. You will see the below loading screen while it is initially loading. Please note, it can take a while (multiple hours) to display token and contract details as it needs to process the entire blockchain history. AWS \u00b6 The AWS Marketplace offer provides a pre-configured VM with Epirus already installed. It requires an active AWS subscription. You will need to provide details of the RPC endpoint for your Hyperledger Besu/Quorum/Ethereum node. Copy the RPC endpoint for your node, such as http://<your-service-url>:8545 (the default RPC port is 8545). This is the same URL you use to attach a console to your node - i.e. geth attach http://<your-service-url>:8545 (for more information, head here ). Once the virtual machine has been deployed, launch a terminal on the machine: ssh -i <keyfile> ubuntu@<machine name> Then copy the HTTPS access keys with node URL, such as http://<your-service-url> Once the virtual machine has been deployed, launch a terminal on the machine. Then run the following command to configure the node ( please note AWS requires authentication credentials to be configured ): $ sudo epirus setup Configuring Epirus instance Please enter a username: <enter username> New password: <enter password> Re-type new password: <re-enter password> Adding password for user <username> Please enter node URL: http://<your-service-url> Successfully connected to http://<your-service-url> Configuration written to /usr/local/src/epirus/epirus.conf You can then start the Epirus service: $ sudo systemctl start epirus.service You will be able to access the Explorer UI via http://vm-ip-address-or-hostname , providing the authentication credentials you specified when prompted. Please allow a few minutes for the service to fully initialise and display data when initially run. It will automatically start up on subsequent reboots. Please note, it can take a while (multiple hours) to display token and contract details as it needs to process the entire blockchain history. If you need to modify or create additional access credentials, you can use the following command: sudo epirus passwd <new or existing username> Enterprise \u00b6 Web3 Labs also provides hosted Blockchain Explorer instances - these can be hosted within your cloud subscription or hosted by us. Some of the features include: SSO authentication (Active Directory, SAML, Okta, etc) Dedicated database Data encryption at rest and in transit Continuous backup and point in time data recovery Full access to backups Tableau integration support For further information please email us . Free \u00b6 A free, feature limited version of Epirus is available. This version is updated periodically, unlike the Azure and SaaS offerings which are constantly being updated with the latest features. To get started with the free version, you'll need Git installed and an Ethereum, Hyperledger Besu or Quorum node endpoint. Run the following command to download Epirus: git clone https://github.com/epirus-io/epirus-free.git Navigate to the epirus-free directory directory and run the instance with: cd epirus-free NODE_ENDPOINT = http://<node_endpoint> docker-compose up Note that if setting NODE_ENDPOINT to a local Ethereum instance, you may need to use the IP address associated with the Docker bridged interface, often denoted by docker0 . Append the -d argument to run the containers in the backgroud You will be able to access the Explorer UI via: http://localhost To stop the containers use: docker-compose down To connect to new network you should remove the volumes associated with the old network docker-compose down -v","title":"Getting Started"},{"location":"explorer/getting_started/#getting-started","text":"Epirus supports a number of different hosting options which all come with support from the Web3 Labs team: Cloud - you can find it in the AWS and Azure marketplaces SaaS - we also provide a hosted or on-premise Enterprise version There is also a basic Free version. This documentation reflects the features of our AWS, Azure and Enterprise versions.","title":"Getting Started"},{"location":"explorer/getting_started/#azure","text":"The Azure Marketplace offer is the simplest full version of Epirus to get up and running with. It requires an active Azure cloud subscription You will need to provide details of your managed ledger (or Ethereum/Quorum/Hyperledger Besu) node. In your Azure portal, navigate to the Azure Blockchain Service instance you wish to use. From here click Transaction nodes -> <your-transaction-node> -> Connection strings Then copy the HTTPS access keys with node URL, such as https://<your-service>.blockchain.azure.com:3200/<acess-key> You will be able to access the Explorer UI via http://<instance-name>-<uuid>.<region>.cloudapp.azure.com To view the actual URL, navigate to the Overview page for the resource group you used for Epirus, then head to Deployments -> blk-technologies.... -> Outputs -> epirusUrl . Please allow a few minutes for the service to fully initialise and display data when initially run. You will see the below loading screen while it is initially loading. Please note, it can take a while (multiple hours) to display token and contract details as it needs to process the entire blockchain history.","title":"Azure"},{"location":"explorer/getting_started/#aws","text":"The AWS Marketplace offer provides a pre-configured VM with Epirus already installed. It requires an active AWS subscription. You will need to provide details of the RPC endpoint for your Hyperledger Besu/Quorum/Ethereum node. Copy the RPC endpoint for your node, such as http://<your-service-url>:8545 (the default RPC port is 8545). This is the same URL you use to attach a console to your node - i.e. geth attach http://<your-service-url>:8545 (for more information, head here ). Once the virtual machine has been deployed, launch a terminal on the machine: ssh -i <keyfile> ubuntu@<machine name> Then copy the HTTPS access keys with node URL, such as http://<your-service-url> Once the virtual machine has been deployed, launch a terminal on the machine. Then run the following command to configure the node ( please note AWS requires authentication credentials to be configured ): $ sudo epirus setup Configuring Epirus instance Please enter a username: <enter username> New password: <enter password> Re-type new password: <re-enter password> Adding password for user <username> Please enter node URL: http://<your-service-url> Successfully connected to http://<your-service-url> Configuration written to /usr/local/src/epirus/epirus.conf You can then start the Epirus service: $ sudo systemctl start epirus.service You will be able to access the Explorer UI via http://vm-ip-address-or-hostname , providing the authentication credentials you specified when prompted. Please allow a few minutes for the service to fully initialise and display data when initially run. It will automatically start up on subsequent reboots. Please note, it can take a while (multiple hours) to display token and contract details as it needs to process the entire blockchain history. If you need to modify or create additional access credentials, you can use the following command: sudo epirus passwd <new or existing username>","title":"AWS"},{"location":"explorer/getting_started/#enterprise","text":"Web3 Labs also provides hosted Blockchain Explorer instances - these can be hosted within your cloud subscription or hosted by us. Some of the features include: SSO authentication (Active Directory, SAML, Okta, etc) Dedicated database Data encryption at rest and in transit Continuous backup and point in time data recovery Full access to backups Tableau integration support For further information please email us .","title":"Enterprise"},{"location":"explorer/getting_started/#free","text":"A free, feature limited version of Epirus is available. This version is updated periodically, unlike the Azure and SaaS offerings which are constantly being updated with the latest features. To get started with the free version, you'll need Git installed and an Ethereum, Hyperledger Besu or Quorum node endpoint. Run the following command to download Epirus: git clone https://github.com/epirus-io/epirus-free.git Navigate to the epirus-free directory directory and run the instance with: cd epirus-free NODE_ENDPOINT = http://<node_endpoint> docker-compose up Note that if setting NODE_ENDPOINT to a local Ethereum instance, you may need to use the IP address associated with the Docker bridged interface, often denoted by docker0 . Append the -d argument to run the containers in the backgroud You will be able to access the Explorer UI via: http://localhost To stop the containers use: docker-compose down To connect to new network you should remove the volumes associated with the old network docker-compose down -v","title":"Free"},{"location":"explorer/metadata/","text":"Contract Metadata Registry \u00b6 Epirus' integrated smart contract registry allows you to upload contract metadata files, which enables Epirus to provide far richer details about smart contracts and their associated transactions then would typically be possible in a blockchain network. Additionally, Epirus will only successfully map a metadata file to a smart contract if the contract binary code contains a hash that matches the metadata file. This enables you to guarantee that smart contract code that was deployed to the network was created using the same source code as the metadata file. When present, it enables Epirus to display: The name of the contracts deployed to the network Decode the names of all events and parameters that are emitted in transactions You can generate Solidity or Truffle metadata files via the following methods. Solidity \u00b6 Run solc --metadata when you compile your smart contract code to generate the file. The file you want to upload is typically called <ContractName>_meta.json . Truffle \u00b6 When you run truffle compile a <Contract>.json file is generated that contains various contract information. Within this file in addition to the abi and bytecode entries there is a metadata field. If you put the metadata content into a json file you should be able to upload it. Metadata Upload \u00b6 There are two places that you can upload the metadata, in the contract view page under Additional Details by clicking the Upload link next to Contract Metadata . Alternatively, you can head to the Metadata Registry itself, which you can access by clicking on the person icon in the top right corner. From the registry you can view all of your contracts with associated metadata. By clicking on one of the metadata file names, you will be taken to a view of all contracts associated with that metadata file.","title":"Contract Metadata Registry"},{"location":"explorer/metadata/#contract-metadata-registry","text":"Epirus' integrated smart contract registry allows you to upload contract metadata files, which enables Epirus to provide far richer details about smart contracts and their associated transactions then would typically be possible in a blockchain network. Additionally, Epirus will only successfully map a metadata file to a smart contract if the contract binary code contains a hash that matches the metadata file. This enables you to guarantee that smart contract code that was deployed to the network was created using the same source code as the metadata file. When present, it enables Epirus to display: The name of the contracts deployed to the network Decode the names of all events and parameters that are emitted in transactions You can generate Solidity or Truffle metadata files via the following methods.","title":"Contract Metadata Registry"},{"location":"explorer/metadata/#solidity","text":"Run solc --metadata when you compile your smart contract code to generate the file. The file you want to upload is typically called <ContractName>_meta.json .","title":"Solidity"},{"location":"explorer/metadata/#truffle","text":"When you run truffle compile a <Contract>.json file is generated that contains various contract information. Within this file in addition to the abi and bytecode entries there is a metadata field. If you put the metadata content into a json file you should be able to upload it.","title":"Truffle"},{"location":"explorer/metadata/#metadata-upload","text":"There are two places that you can upload the metadata, in the contract view page under Additional Details by clicking the Upload link next to Contract Metadata . Alternatively, you can head to the Metadata Registry itself, which you can access by clicking on the person icon in the top right corner. From the registry you can view all of your contracts with associated metadata. By clicking on one of the metadata file names, you will be taken to a view of all contracts associated with that metadata file.","title":"Metadata Upload"},{"location":"explorer/mobile/","text":"Mobile Experience \u00b6 Epirus provides a fully responsive user experience. Although primarily intended for using with a desktop computer or laptop, we designed a great mobile experience too. The mobile experience makes available all of the core functionality of the explorer such as the token, contract, address, transaction and block views along with all of the filtering and searching functionality. Navigation \u00b6 Navigation is performed via the menu at the bottom of the screen. Contracts \u00b6 As with the desktop version youur point of entry is the contracts view. Clicking on a contract takes you to the contract details. Filtering and sorting \u00b6 You also have sorting and filters available for all of your list views. This allows you to sort for instance by the most active ERC20 contracts. Tokens \u00b6 Navigating to the tokens page we have all tokens listed. Where we can view individual token details. Accounts \u00b6 We also can view balances associated with accounts when we browse to an account which is associated with an Ethereum wallet, i.e. not a smart contract address. Transactions \u00b6 The transactions view lists all transactions. Clicking on a transaction provides the transaction details. Blocks \u00b6 Likewise the blocks view lists all blocks. Again, clicking on a block provides the block details with associated transactions. Profile \u00b6 Finally, the Profile view allows you to see the sync status of the network and browse to the contract registry.","title":"Mobile Experience"},{"location":"explorer/mobile/#mobile-experience","text":"Epirus provides a fully responsive user experience. Although primarily intended for using with a desktop computer or laptop, we designed a great mobile experience too. The mobile experience makes available all of the core functionality of the explorer such as the token, contract, address, transaction and block views along with all of the filtering and searching functionality.","title":"Mobile Experience"},{"location":"explorer/mobile/#navigation","text":"Navigation is performed via the menu at the bottom of the screen.","title":"Navigation"},{"location":"explorer/mobile/#contracts","text":"As with the desktop version youur point of entry is the contracts view. Clicking on a contract takes you to the contract details.","title":"Contracts"},{"location":"explorer/mobile/#filtering-and-sorting","text":"You also have sorting and filters available for all of your list views. This allows you to sort for instance by the most active ERC20 contracts.","title":"Filtering and sorting"},{"location":"explorer/mobile/#tokens","text":"Navigating to the tokens page we have all tokens listed. Where we can view individual token details.","title":"Tokens"},{"location":"explorer/mobile/#accounts","text":"We also can view balances associated with accounts when we browse to an account which is associated with an Ethereum wallet, i.e. not a smart contract address.","title":"Accounts"},{"location":"explorer/mobile/#transactions","text":"The transactions view lists all transactions. Clicking on a transaction provides the transaction details.","title":"Transactions"},{"location":"explorer/mobile/#blocks","text":"Likewise the blocks view lists all blocks. Again, clicking on a block provides the block details with associated transactions.","title":"Blocks"},{"location":"explorer/mobile/#profile","text":"Finally, the Profile view allows you to see the sync status of the network and browse to the contract registry.","title":"Profile"},{"location":"explorer/rest/","text":"REST API \u00b6 Epirus provides a RESTful API which can be used for bespoke reporting. To access the Swagger docs for the API, which allow you to easily query the API, head to <your-instance-url>/api . Swagger also makes it straight forwards to test API queries. This API makes available all data you see in the user interface. This, combined with the filtering functionality and the contract registry, allows you to easily create custom reports for your blockchain applications, such as details of all transfer events associated with a specific token.","title":"REST API"},{"location":"explorer/rest/#rest-api","text":"Epirus provides a RESTful API which can be used for bespoke reporting. To access the Swagger docs for the API, which allow you to easily query the API, head to <your-instance-url>/api . Swagger also makes it straight forwards to test API queries. This API makes available all data you see in the user interface. This, combined with the filtering functionality and the contract registry, allows you to easily create custom reports for your blockchain applications, such as details of all transfer events associated with a specific token.","title":"REST API"},{"location":"explorer/tagging/","text":"Address Tagging \u00b6 At Web3 Labs we're trying to eliminate all sources of complexity in the blockchain. Hexadecimal contract addresses are one such challenge. Now in Epirus, if you have a contract you'd like to give a human readable name, you can simply tag it with an alternate identifier. When you're viewing a contract, if you hover over the ellipses ( ... ) to the right of the address, you are given the option to add a tag. Enter a name for the contract address in the text box. And no more hex address is shown for the contract! Don't worry, you can still easily access the contract address if you need to.","title":"Address Tagging"},{"location":"explorer/tagging/#address-tagging","text":"At Web3 Labs we're trying to eliminate all sources of complexity in the blockchain. Hexadecimal contract addresses are one such challenge. Now in Epirus, if you have a contract you'd like to give a human readable name, you can simply tag it with an alternate identifier. When you're viewing a contract, if you hover over the ellipses ( ... ) to the right of the address, you are given the option to add a tag. Enter a name for the contract address in the text box. And no more hex address is shown for the contract! Don't worry, you can still easily access the contract address if you need to.","title":"Address Tagging"},{"location":"explorer/web3j/","text":"Web3j Integration \u00b6 The Web3j JVM integration library can be configured to work with Epirus. When a Web3j project uses the Epirus integration, all smart contract metadata is automatically uploaded into Epirus. This will guarantee that all contract, method, event names and associated parameter names will be registered in Epirus, greatly improving the experience for end-users. It also assists developers if they are using Epirus to support their test environment. The Epirus integration for Web3j uses the Gradle build tool. To use it, you can follow the instructions on the project README .","title":"Web3j Integration"},{"location":"explorer/web3j/#web3j-integration","text":"The Web3j JVM integration library can be configured to work with Epirus. When a Web3j project uses the Epirus integration, all smart contract metadata is automatically uploaded into Epirus. This will guarantee that all contract, method, event names and associated parameter names will be registered in Epirus, greatly improving the experience for end-users. It also assists developers if they are using Epirus to support their test environment. The Epirus integration for Web3j uses the Gradle build tool. To use it, you can follow the instructions on the project README .","title":"Web3j Integration"},{"location":"platform/","text":"Overview & QuickStart \u00b6 The Epirus platform consists of a suite of tools and services to enable rapid and efficent development, deployment and monitoring of blockchain applications. The Epirus CLI allows you to create and deploy new blockchain applications as a developer on your local machine. Epirus simplifies the creation of smart contracts & their integration with your application logic. Once development is completed, the CLI allows you to deploy and monitor your contracts with ease. Installation \u00b6 To install the Epirus CLI on your local machine (MacOS, Windows & Linux supported), run the following: curl -L get.epirus.io | sh && source ~/.epirus/source.sh QuickStart \u00b6 To get up & running fast with Epirus, this quickstart will guide you through the account creation process, and subsequently the process of setting up a new Ethereum smart contract project. In order to create a new account, use the command epirus account create , and enter your email address when prompted. You will be sent an activation email. Once your email address has been confirmed, you will have an account on the Epirus platform and will be able to make use of all features. After having created a new account, use the command epirus new to create a new project. Epirus will use sensible defaults for all the questions asked during the project setup process, so if you hit enter on each question, the output should be similar to the following: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter the project name [Web3App]: Please enter the package name for your project [io.epirus]: Please enter the destination of your project [/home/user/project]: [ \\ ] Creating Web3App Project Created Successfully Project information Wallet Address 0xd66aa9b52a33f0318fbe609142db46156c176c04 Commands ./gradlew run Runs your application ./gradlew test Test your application epirus deploy Deploys your application Epirus has now created a new project using Gradle, which includes a demo smart contract, and all the necessary code to interact with it, test it, and deploy it. Using the epirus deploy command, you will be able to deploy your code to the Rinkeby and Ropsten Ethereum test networks, from the wallet address that Epirus generated for you (this wallet will be automatically funded with testnet Ether by Epirus during the contract deploy process).","title":"Overview & QuickStart"},{"location":"platform/#overview-quickstart","text":"The Epirus platform consists of a suite of tools and services to enable rapid and efficent development, deployment and monitoring of blockchain applications. The Epirus CLI allows you to create and deploy new blockchain applications as a developer on your local machine. Epirus simplifies the creation of smart contracts & their integration with your application logic. Once development is completed, the CLI allows you to deploy and monitor your contracts with ease.","title":"Overview &amp; QuickStart"},{"location":"platform/#installation","text":"To install the Epirus CLI on your local machine (MacOS, Windows & Linux supported), run the following: curl -L get.epirus.io | sh && source ~/.epirus/source.sh","title":"Installation"},{"location":"platform/#quickstart","text":"To get up & running fast with Epirus, this quickstart will guide you through the account creation process, and subsequently the process of setting up a new Ethereum smart contract project. In order to create a new account, use the command epirus account create , and enter your email address when prompted. You will be sent an activation email. Once your email address has been confirmed, you will have an account on the Epirus platform and will be able to make use of all features. After having created a new account, use the command epirus new to create a new project. Epirus will use sensible defaults for all the questions asked during the project setup process, so if you hit enter on each question, the output should be similar to the following: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter the project name [Web3App]: Please enter the package name for your project [io.epirus]: Please enter the destination of your project [/home/user/project]: [ \\ ] Creating Web3App Project Created Successfully Project information Wallet Address 0xd66aa9b52a33f0318fbe609142db46156c176c04 Commands ./gradlew run Runs your application ./gradlew test Test your application epirus deploy Deploys your application Epirus has now created a new project using Gradle, which includes a demo smart contract, and all the necessary code to interact with it, test it, and deploy it. Using the epirus deploy command, you will be able to deploy your code to the Rinkeby and Ropsten Ethereum test networks, from the wallet address that Epirus generated for you (this wallet will be automatically funded with testnet Ether by Epirus during the contract deploy process).","title":"QuickStart"},{"location":"platform/accounts/","text":"Accounts \u00b6 The core features of the Epirus platform can be used without having an account, however account creation affords various benefits: The ability to use Epirus faucets to receive testnet funds The ability to deploy and interact with smart contracts without having an Ethereum node Public blockchain explorer access Additionally, with a premium account more features are available: Test blockchain environment - no funding costs Work in fiat currencies SSO RESTful API Usage analytics Smart contract tracking Monitoring and alerting of smart contracts (testnets) X API calls/day Security features Multiple accounts associated with single portal Custom network support Custom URL","title":"Accounts"},{"location":"platform/accounts/#accounts","text":"The core features of the Epirus platform can be used without having an account, however account creation affords various benefits: The ability to use Epirus faucets to receive testnet funds The ability to deploy and interact with smart contracts without having an Ethereum node Public blockchain explorer access Additionally, with a premium account more features are available: Test blockchain environment - no funding costs Work in fiat currencies SSO RESTful API Usage analytics Smart contract tracking Monitoring and alerting of smart contracts (testnets) X API calls/day Security features Multiple accounts associated with single portal Custom network support Custom URL","title":"Accounts"},{"location":"platform/cli/","text":"CLI \u00b6 An Epirus binary is distributed, providing an interactive command line (CLI). It allows you to use some of Epirus' key functionality from your terminal, including: New project creation Project creation from existing Solidity code Wallet creation Wallet password management Ether transfer from one wallet to another Generation of Solidity smart contract wrappers Generation of unit tests for Java smart contract wrappers Smart contract auditing Account creation & management Wallet funding Installation \u00b6 Script \u00b6 The simplest way to install the Epirus CLI is via the following script: curl -L get.epirus.io | sh && source ~/.epirus/source.sh You can verify the installation was successful by running epirus version , which should output as follows: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Version: 0 .9.1 Build timestamp: 2020 -03-31 11 :39:28.526 UTC Epirus new & import \u00b6 The epirus new and epirus import commands provide a convenient way to create a new Kotlin/Java project using Epirus's Command Line Tools. These commands provide the following functionality: Creation of a new Java/Kotlin project. Generation of a simple Hello World Solidity contract (named the HelloWorld ) or import an existing Solidity project from a file or directory. Compilation of the Solidity files. Configure the project to use the Gradle build tool. Generate Java smart contract wrappers for all provided Solidity files. Add the required Epirus dependencies, to deploy and interact with the contracts. Generate unit tests for the Java smart contract wrappers. Generate a password protected wallet with each project. epirus new / epirus new --java \u00b6 To generate a new project interactively: epirus new You will be prompted to answer a series of questions to create your project: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Please enter the project name [ Web3App ] : Please enter the package name for your project [ io.epirus ] : Please enter the destination of your project [ /home/user/project ] : [ | ] Creating Web3App Project Created Successfully Project information Wallet Address 0xf042183586d45c3580905ce93c956e4eb1303a1e Commands ./gradlew run Runs your application ./gradlew test Test your application epirus deploy Deploys your application $ Details of the created project structure are below . Or using non-interactive mode: epirus new -n <project name> -p <package name> [ -o <path> ] The -o option can be omitted if you want to generate the project in the current directory. The project name and package name values must comply with the Java standard. The project name is also used as the class name. Epirus import / Epirus import --java \u00b6 Similarly to epirus new , epirus import will create a new project but with user defined smart contracts. By default a Kotlin project will be generated if the --java option is not appended. Again, to generate a new project interactively: epirus import You will be prompted to answer a series of questions to create your project: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Please enter the project name [ Web3App ] : MyImportedProject Please enter the package name for your project [ io.epirus ] : com.web3labs.eth Please enter the path to your solidity file/folder [ Required Field ] : /path/to/solidity Please enter the destination of your project [ /home/user/Documents/myfolder ] : . Would you like to generate unit test for your solidity contracts [ Y/n ] ? n Project created with name: myimportedproject at location: . $ This command can also be used non-interactively epirus import -n <project name> -p <package name> -s <path to solidity sources> [-o <path>] -t or epirus import The -s option will work with a single solidity file or a folder containing solidity files. The -t option is false by default. By passing -t unit tests will be generated for the java wrappers. Epirus generate-tests / Epirus generate-tests --java \u00b6 When creating a new project or importing solidity contracts, by using: epirus generate-tests You will be prompted to answer a series of questions to generate your tests: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter the path of the generated contract wrappers. /home/user/Documents/dev/java/ Where would you like to save your tests. /home/user/Documents/dev/unit-tests/ Unit tests were generated successfully at location: /home/user/Documents/dev/unit-tests/ The command can also be used non-interactively epirus generate-tests -i <Solidity java wrappers> -o <output path> When adding the path to your Java wrappers make sure you specify the path up to the package root e.g: If a class with name HelloWorld and package name io.epirus is located under /home/user/Documents/dev/io/epirus/HelloWorld.java , the correct way to point to that class is /home/user/Documents/dev Generated project structure \u00b6 Your application code and tests will be located in the following project directories: For Kotlin: ./src/main/kotlin - Generated Kotlin application code stub ./src/test/kotlin - Generated Kotlin test code stub ./src/main/solidity - Solidity source code For Java: ./src/main/java - Generated Java application code stub ./src/test/java - Generated Java test code stub ./src/main/solidity - Solidity source code If you need to edit the build file, it is located in the project root directory: ./build.gradle - Gradle build configuration file Additionally there are the following Gradle artifacts which you can ignore. /gradle - local Gradle installation /.gradle - local Gradle cache /build - compiled classes including smart contract bindings If you need to view any of the generated Solidity or contract artifacts, they are available in the following locations. Solidity bin and abi files are located at: ./build/resources/main/solidity/ The source code for the generated smart contract bindings can be found at: ./build/generated/source/epirus/main/java/<your-package>/generated/contracts The compiled code for the generated smart contracts bindings is available at the below location. These are the artifacts that you use to deploy, transact and query your smart contracts. ./build/classes/java/main/<your-package>/generated/contracts/ Build commands \u00b6 Epirus projects use the Gradle build tool under the covers. Gradle is a build DSL for JVM projects used widely in Java, Kotlin and Android projects. You shouldn't need to be too concerned with the semantics of Gradle beyond the following build commands: To build the project run: ./gradlew build To update the just the smart contract bindings following changes to the Solidity code run: ./gradlew generateContractWrappers To delete all project build artifacts, creating a clean environment, run: ./gradlew clean Wallet tools \u00b6 To generate a new Ethereum wallet: $ epirus wallet create To update the password for an existing wallet: $ epirus wallet update <walletfile> To send Ether to another address: $ epirus wallet send <walletfile> 0x<address> | <ensName> When sending Ether to another address you will be asked a series of questions before the transaction takes place. See the below for a full example The following example demonstrates using Epirus to send Ether to another wallet. For input: epirus wallet send <walletfile> 0x<address>|<ensName> ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter your existing wallet file password: Wallet for address 0x19e03255f667bdfd50a32722df860b1eeaf4d635 loaded Please confirm address of running Ethereum client you wish to send the transfer request to [http://localhost:8545/]: Connected successfully to client: Geth/v1.4.18-stable-c72f5459/darwin/go1.7.3 What amound would you like to transfer (please enter a numeric value): 0.000001 Please specify the unit (ether, wei, ...) [ether]: Please confim that you wish to transfer 0.000001 ether (1000000000000 wei) to address 0x9c98e381edc5fe1ac514935f3cc3edaa764cf004 Please type 'yes' to proceed: yes Commencing transfer (this may take a few minutes)...................................................................................................................$ Funds have been successfully transferred from 0x19e03255f667bdfd50a32722df860b1eeaf4d635 to 0x9c98e381edc5fe1ac514935f3cc3edaa764cf004 Transaction hash: 0xb00afc5c2bb92a76d03e17bd3a0175b80609e877cb124c02d19000d529390530 Mined block number: 1849039 To fund a wallet on the Rinkeby or Ropsten testnet using the faucets provided by Web3 Labs, use the following command: epirus wallet fund <network name> 0x<address> For instance, to fund the address 0xc6c7224128b9714b47009be351d0ea5bcb16da29 , on Rinkeby: epirus wallet fund rinkeby 0xc6c7224128b9714b47009be351d0ea5bcb16da29 Please note that this functionality requires a proof-of-work based captcha, and is rate-limited. Rinkeby and Ropsten Web3 Labs faucets can also be accessed from your browser. Auditing Tools \u00b6 Smart contracts written in Solidity often include logic bugs and other issues which might compromise their security. These are not always obvious to programmers. Issues can include integer precision problems , re-entrancy attacks , and many other flaws. As Ethereum smart contracts are immutable once they have been deployed, it is important that they are bug-free at this point. Epirus is able to audit smart contracts for certain common issues and vulnerabilities using static code analysis. To audit a smart contract (in this instance, Campaign.sol): $ epirus audit Campaign.sol An example of the output from this command is as follows: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | ./Campaign.sol 131 :58 severity:2 Multiplication after division SOLIDITY_DIV_MUL_09hhh1 91 :8 severity:1 Revert inside the if -operator SOLIDITY_REVERT_REQUIRE_c56b12 5 :4 severity:1 Use of SafeMath SOLIDITY_SAFEMATH_837cac 148 :4 severity:1 Replace multiple return values with a struct SOLIDITY_SHOULD_RETURN_STRUCT_83hf3l 125 :4 severity:1 Prefer external to public visibility level SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL_73ufc1 \u2716 5 problems ( 5 errors ) The output is in the form of a list of issues/errors detected by the static analysis tool. The first column of output shows the line and the character at which the issue was encountered. The second column shows the severity; this ranges from 1 to 3, with 3 being the most severe. The next column contains a description of the issue found, and the final column provides a reference to the rule used to find the issue. This functionality is provided by SmartCheck . Solidity smart contract wrapper generator \u00b6 Please refer to solidity smart contract wrappers . Account Creation \u00b6 In order to create an Epirus account to make full use of the platform features, the command epirus account create can be used. After account creation & email confirmation, all free platform features will be enabled. The output from the account creation process should be as follows: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter your email address: youremail@yourdomain.com Account created successfully. You can now use Epirus Cloud. Please confirm your e-mail within 24 hours to continue using all features without interruption.","title":"CLI"},{"location":"platform/cli/#cli","text":"An Epirus binary is distributed, providing an interactive command line (CLI). It allows you to use some of Epirus' key functionality from your terminal, including: New project creation Project creation from existing Solidity code Wallet creation Wallet password management Ether transfer from one wallet to another Generation of Solidity smart contract wrappers Generation of unit tests for Java smart contract wrappers Smart contract auditing Account creation & management Wallet funding","title":"CLI"},{"location":"platform/cli/#installation","text":"","title":"Installation"},{"location":"platform/cli/#script","text":"The simplest way to install the Epirus CLI is via the following script: curl -L get.epirus.io | sh && source ~/.epirus/source.sh You can verify the installation was successful by running epirus version , which should output as follows: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Version: 0 .9.1 Build timestamp: 2020 -03-31 11 :39:28.526 UTC","title":"Script"},{"location":"platform/cli/#epirus-new-import","text":"The epirus new and epirus import commands provide a convenient way to create a new Kotlin/Java project using Epirus's Command Line Tools. These commands provide the following functionality: Creation of a new Java/Kotlin project. Generation of a simple Hello World Solidity contract (named the HelloWorld ) or import an existing Solidity project from a file or directory. Compilation of the Solidity files. Configure the project to use the Gradle build tool. Generate Java smart contract wrappers for all provided Solidity files. Add the required Epirus dependencies, to deploy and interact with the contracts. Generate unit tests for the Java smart contract wrappers. Generate a password protected wallet with each project.","title":"Epirus new &amp; import"},{"location":"platform/cli/#epirus-new-epirus-new-java","text":"To generate a new project interactively: epirus new You will be prompted to answer a series of questions to create your project: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Please enter the project name [ Web3App ] : Please enter the package name for your project [ io.epirus ] : Please enter the destination of your project [ /home/user/project ] : [ | ] Creating Web3App Project Created Successfully Project information Wallet Address 0xf042183586d45c3580905ce93c956e4eb1303a1e Commands ./gradlew run Runs your application ./gradlew test Test your application epirus deploy Deploys your application $ Details of the created project structure are below . Or using non-interactive mode: epirus new -n <project name> -p <package name> [ -o <path> ] The -o option can be omitted if you want to generate the project in the current directory. The project name and package name values must comply with the Java standard. The project name is also used as the class name.","title":"epirus new / epirus new --java"},{"location":"platform/cli/#epirus-import-epirus-import-java","text":"Similarly to epirus new , epirus import will create a new project but with user defined smart contracts. By default a Kotlin project will be generated if the --java option is not appended. Again, to generate a new project interactively: epirus import You will be prompted to answer a series of questions to create your project: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | Please enter the project name [ Web3App ] : MyImportedProject Please enter the package name for your project [ io.epirus ] : com.web3labs.eth Please enter the path to your solidity file/folder [ Required Field ] : /path/to/solidity Please enter the destination of your project [ /home/user/Documents/myfolder ] : . Would you like to generate unit test for your solidity contracts [ Y/n ] ? n Project created with name: myimportedproject at location: . $ This command can also be used non-interactively epirus import -n <project name> -p <package name> -s <path to solidity sources> [-o <path>] -t or epirus import The -s option will work with a single solidity file or a folder containing solidity files. The -t option is false by default. By passing -t unit tests will be generated for the java wrappers.","title":"Epirus import / Epirus import --java"},{"location":"platform/cli/#epirus-generate-tests-epirus-generate-tests-java","text":"When creating a new project or importing solidity contracts, by using: epirus generate-tests You will be prompted to answer a series of questions to generate your tests: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter the path of the generated contract wrappers. /home/user/Documents/dev/java/ Where would you like to save your tests. /home/user/Documents/dev/unit-tests/ Unit tests were generated successfully at location: /home/user/Documents/dev/unit-tests/ The command can also be used non-interactively epirus generate-tests -i <Solidity java wrappers> -o <output path> When adding the path to your Java wrappers make sure you specify the path up to the package root e.g: If a class with name HelloWorld and package name io.epirus is located under /home/user/Documents/dev/io/epirus/HelloWorld.java , the correct way to point to that class is /home/user/Documents/dev","title":"Epirus generate-tests / Epirus generate-tests --java"},{"location":"platform/cli/#generated-project-structure","text":"Your application code and tests will be located in the following project directories: For Kotlin: ./src/main/kotlin - Generated Kotlin application code stub ./src/test/kotlin - Generated Kotlin test code stub ./src/main/solidity - Solidity source code For Java: ./src/main/java - Generated Java application code stub ./src/test/java - Generated Java test code stub ./src/main/solidity - Solidity source code If you need to edit the build file, it is located in the project root directory: ./build.gradle - Gradle build configuration file Additionally there are the following Gradle artifacts which you can ignore. /gradle - local Gradle installation /.gradle - local Gradle cache /build - compiled classes including smart contract bindings If you need to view any of the generated Solidity or contract artifacts, they are available in the following locations. Solidity bin and abi files are located at: ./build/resources/main/solidity/ The source code for the generated smart contract bindings can be found at: ./build/generated/source/epirus/main/java/<your-package>/generated/contracts The compiled code for the generated smart contracts bindings is available at the below location. These are the artifacts that you use to deploy, transact and query your smart contracts. ./build/classes/java/main/<your-package>/generated/contracts/","title":"Generated project structure"},{"location":"platform/cli/#build-commands","text":"Epirus projects use the Gradle build tool under the covers. Gradle is a build DSL for JVM projects used widely in Java, Kotlin and Android projects. You shouldn't need to be too concerned with the semantics of Gradle beyond the following build commands: To build the project run: ./gradlew build To update the just the smart contract bindings following changes to the Solidity code run: ./gradlew generateContractWrappers To delete all project build artifacts, creating a clean environment, run: ./gradlew clean","title":"Build commands"},{"location":"platform/cli/#wallet-tools","text":"To generate a new Ethereum wallet: $ epirus wallet create To update the password for an existing wallet: $ epirus wallet update <walletfile> To send Ether to another address: $ epirus wallet send <walletfile> 0x<address> | <ensName> When sending Ether to another address you will be asked a series of questions before the transaction takes place. See the below for a full example The following example demonstrates using Epirus to send Ether to another wallet. For input: epirus wallet send <walletfile> 0x<address>|<ensName> ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter your existing wallet file password: Wallet for address 0x19e03255f667bdfd50a32722df860b1eeaf4d635 loaded Please confirm address of running Ethereum client you wish to send the transfer request to [http://localhost:8545/]: Connected successfully to client: Geth/v1.4.18-stable-c72f5459/darwin/go1.7.3 What amound would you like to transfer (please enter a numeric value): 0.000001 Please specify the unit (ether, wei, ...) [ether]: Please confim that you wish to transfer 0.000001 ether (1000000000000 wei) to address 0x9c98e381edc5fe1ac514935f3cc3edaa764cf004 Please type 'yes' to proceed: yes Commencing transfer (this may take a few minutes)...................................................................................................................$ Funds have been successfully transferred from 0x19e03255f667bdfd50a32722df860b1eeaf4d635 to 0x9c98e381edc5fe1ac514935f3cc3edaa764cf004 Transaction hash: 0xb00afc5c2bb92a76d03e17bd3a0175b80609e877cb124c02d19000d529390530 Mined block number: 1849039 To fund a wallet on the Rinkeby or Ropsten testnet using the faucets provided by Web3 Labs, use the following command: epirus wallet fund <network name> 0x<address> For instance, to fund the address 0xc6c7224128b9714b47009be351d0ea5bcb16da29 , on Rinkeby: epirus wallet fund rinkeby 0xc6c7224128b9714b47009be351d0ea5bcb16da29 Please note that this functionality requires a proof-of-work based captcha, and is rate-limited. Rinkeby and Ropsten Web3 Labs faucets can also be accessed from your browser.","title":"Wallet tools"},{"location":"platform/cli/#auditing-tools","text":"Smart contracts written in Solidity often include logic bugs and other issues which might compromise their security. These are not always obvious to programmers. Issues can include integer precision problems , re-entrancy attacks , and many other flaws. As Ethereum smart contracts are immutable once they have been deployed, it is important that they are bug-free at this point. Epirus is able to audit smart contracts for certain common issues and vulnerabilities using static code analysis. To audit a smart contract (in this instance, Campaign.sol): $ epirus audit Campaign.sol An example of the output from this command is as follows: ______ _ | ____ | ( _ ) | | __ _ __ _ _ __ _ _ ___ | __ | | '_ \\| | ' __ | | | / __ | | | ____ | | _ ) | | | | | _ | \\_ _ \\ | ______ | .__/ | _ | _ | \\_ _,_ | ___/ | | | _ | ./Campaign.sol 131 :58 severity:2 Multiplication after division SOLIDITY_DIV_MUL_09hhh1 91 :8 severity:1 Revert inside the if -operator SOLIDITY_REVERT_REQUIRE_c56b12 5 :4 severity:1 Use of SafeMath SOLIDITY_SAFEMATH_837cac 148 :4 severity:1 Replace multiple return values with a struct SOLIDITY_SHOULD_RETURN_STRUCT_83hf3l 125 :4 severity:1 Prefer external to public visibility level SOLIDITY_UNUSED_FUNCTION_SHOULD_BE_EXTERNAL_73ufc1 \u2716 5 problems ( 5 errors ) The output is in the form of a list of issues/errors detected by the static analysis tool. The first column of output shows the line and the character at which the issue was encountered. The second column shows the severity; this ranges from 1 to 3, with 3 being the most severe. The next column contains a description of the issue found, and the final column provides a reference to the rule used to find the issue. This functionality is provided by SmartCheck .","title":"Auditing Tools"},{"location":"platform/cli/#solidity-smart-contract-wrapper-generator","text":"Please refer to solidity smart contract wrappers .","title":"Solidity smart contract wrapper generator"},{"location":"platform/cli/#account-creation","text":"In order to create an Epirus account to make full use of the platform features, the command epirus account create can be used. After account creation & email confirmation, all free platform features will be enabled. The output from the account creation process should be as follows: ______ _ | ____| (_) | |__ _ __ _ _ __ _ _ ___ | __| | '_ \\| | '__| | | / __| | |____| |_) | | | | |_| \\__ \\ |______| .__/|_|_| \\__,_|___/ | | |_| Please enter your email address: youremail@yourdomain.com Account created successfully. You can now use Epirus Cloud. Please confirm your e-mail within 24 hours to continue using all features without interruption.","title":"Account Creation"},{"location":"platform/faucets/","text":"Faucets \u00b6 The Epirus platform provides automatic wallet funding for accounts on the Rinkeby and Ropsten Ethereum test networks. This means that in order to test your smart contracts on a real, live Ethereum network, you won't need to go about obtaining testnet Ether. When you create an Epirus account and deploy a smart contract using the CLI, your generated wallet will automatically be funded by Epirus with enough testnet Ether to deploy your contracts. In order to fund an arbitrary account, you can use the epirus wallet fund command in the CLI application. For instance, in order to fund an address on the Rinkeby test network, the follwing command would be used: epirus wallet fund rinkeby 0xceeeefe21b2f2ea5df62ed2efde1e3f1e5540f96 If using the CLI application is not convenient, both faucets have web interfaces which can be used to fund arbitrary accounts: Rinkeby Faucet Ropsten Faucet","title":"Faucets"},{"location":"platform/faucets/#faucets","text":"The Epirus platform provides automatic wallet funding for accounts on the Rinkeby and Ropsten Ethereum test networks. This means that in order to test your smart contracts on a real, live Ethereum network, you won't need to go about obtaining testnet Ether. When you create an Epirus account and deploy a smart contract using the CLI, your generated wallet will automatically be funded by Epirus with enough testnet Ether to deploy your contracts. In order to fund an arbitrary account, you can use the epirus wallet fund command in the CLI application. For instance, in order to fund an address on the Rinkeby test network, the follwing command would be used: epirus wallet fund rinkeby 0xceeeefe21b2f2ea5df62ed2efde1e3f1e5540f96 If using the CLI application is not convenient, both faucets have web interfaces which can be used to fund arbitrary accounts: Rinkeby Faucet Ropsten Faucet","title":"Faucets"},{"location":"platform/portal/","text":"Portal \u00b6 A section on the portal and how to use it here, once it's implemented.","title":"Portal"},{"location":"platform/portal/#portal","text":"A section on the portal and how to use it here, once it's implemented.","title":"Portal"}]}